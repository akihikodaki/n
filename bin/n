#!/usr/bin/env python3
# SPDX-License-Identifier: 0BSD

import shlex
import shutil
import os
import pathlib
import sys

def consume(fd):
  with open(fd, "rb") as file:
    environ_str = file.read()

  environ = {}
  for entry in environ_str.split(b"\0"):
    if not entry:
      continue

    key, value = entry.split(b"=", maxsplit=1)
    environ[key] = value

  return environ

parent = pathlib.Path(__file__).parent

if not os.path.isdir("/nix"):
  enter = parent / "n-enter"
  os.execl(enter, enter, *sys.argv)

argv = sys.argv[1:] or ["bash"]
cwd = os.getcwdb()

path = os.path.join(os.environb[b"XDG_RUNTIME_DIR"], b"n")
try:
  fd = os.open(path, os.O_DIRECTORY)
except FileNotFoundError:
  fd = None

if fd:
  try:
    referenceds = []
    unreferenceds = [entry.name.encode() for entry in os.scandir(fd)]
    proc_fd = os.open(b"/proc", os.O_DIRECTORY)
    try:
      for entry in os.scandir(proc_fd):
        environ_path = os.path.join(entry.name.encode(), b"environ")
        try:
          environ_fd = os.open(environ_path, os.O_RDONLY, dir_fd=proc_fd)
        except OSError:
          continue

        name = consume(environ_fd).get(b"N")
        try:
          unreferenceds.remove(name)
        except ValueError:
          continue

        referenceds.append(name)
    finally:
      os.close(proc_fd)

    for name in unreferenceds:
      shutil.rmtree(name, dir_fd=fd)

    for name in referenceds:
      if cwd != os.readlink(os.path.join(name, b"wd"), dir_fd=fd):
        continue

      environ_path = os.path.join(name, b"environ")
      environ = consume(os.open(environ_path, os.O_RDONLY, dir_fd=fd))
      environ[b"N"] = cwd
      os.execvpe(argv[0], argv, environ)
  finally:
    os.close(fd)

os.execlp(b"nix-shell", b"nix-shell", b"--pure", b"--run",
           f'exec {shlex.join([str(parent / "n-env"), *argv])}')
